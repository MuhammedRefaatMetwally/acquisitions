name: Docker Build and Push

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force rebuild even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: acquisitions

jobs:
  docker:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # set branch name as tag
            type=ref,event=branch
            # set commit SHA as tag
            type=sha,prefix={{branch}}-,format=short
            # set production timestamp tag
            type=raw,value=prod-{{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Acquisitions API
            org.opencontainers.image.description=Node.js Express API for acquisitions management
            org.opencontainers.image.vendor=Acquisitions Team
            maintainer=${{ github.actor }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

      - name: Generate build summary
        run: |
          echo "## 🐋 Docker Image Built and Pushed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Image Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Available Tags" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse and display tags
          TAGS="${{ steps.meta.outputs.tags }}"
          echo "$TAGS" | while IFS= read -r tag; do
            if [ ! -z "$tag" ]; then
              echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Build Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** \`linux/amd64\`, \`linux/arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Context:** \`.\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Dockerfile:** \`./Dockerfile\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Stage:** \`production\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Deployment Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Pull the latest image:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run the container:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker run -d -p 3000:3000 --name acquisitions-api ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Image scan summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Security & Best Practices" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Multi-stage build for optimized production image" >> $GITHUB_STEP_SUMMARY
          echo "✅ Non-root user for enhanced security" >> $GITHUB_STEP_SUMMARY
          echo "✅ Health check included" >> $GITHUB_STEP_SUMMARY
          echo "✅ Multi-platform support (AMD64/ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build cache optimization enabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> 💡 **Tip:** Consider setting up automated vulnerability scanning for production deployments." >> $GITHUB_STEP_SUMMARY

  failure-notification:
    runs-on: ubuntu-latest
    needs: docker
    if: failure()
    steps:
      - name: Failure summary
        run: |
          echo "## ❌ Docker Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Docker image build and push process failed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Common Issues & Solutions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Docker Hub Authentication:** Verify \`DOCKER_USERNAME\` and \`DOCKER_PASSWORD\` secrets" >> $GITHUB_STEP_SUMMARY
          echo "2. **Dockerfile Syntax:** Check for syntax errors in the Dockerfile" >> $GITHUB_STEP_SUMMARY
          echo "3. **Build Context:** Ensure all required files are present in the build context" >> $GITHUB_STEP_SUMMARY
          echo "4. **Platform Support:** Verify multi-platform build compatibility" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Debug Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the build logs above for specific error messages" >> $GITHUB_STEP_SUMMARY
          echo "2. Test the Docker build locally: \`docker build -t test-image .\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify secrets are correctly configured in repository settings" >> $GITHUB_STEP_SUMMARY